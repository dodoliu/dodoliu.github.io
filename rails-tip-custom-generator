<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">


<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"dodoliu.github.io","root":"/","scheme":"Muse","version":"7.8.0","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"path":"search.xml"};
  </script>

  <meta name="description" content="在Rails项目中,scaffold提供了生成初始代码的强大功能.但任然不能满足日常开发需求.针对部分重复的代码手动ctrl+c,ctrl+v总显得太low.如果能自定义scaffold那就完美了.庆幸的是Rails提供了这种功能.下面以我的开源项目opendoc为例,来自定义scaffold.首先来生成generator. 1rails generate generator opendoc_sc">
<meta property="og:type" content="article">
<meta property="og:title" content="自定义generator">
<meta property="og:url" content="http://dodoliu.github.io/rails-tip-custom-generator">
<meta property="og:site_name" content="dodoliu的折腾笔记">
<meta property="og:description" content="在Rails项目中,scaffold提供了生成初始代码的强大功能.但任然不能满足日常开发需求.针对部分重复的代码手动ctrl+c,ctrl+v总显得太low.如果能自定义scaffold那就完美了.庆幸的是Rails提供了这种功能.下面以我的开源项目opendoc为例,来自定义scaffold.首先来生成generator. 1rails generate generator opendoc_sc">
<meta property="og:locale" content="zh_CN">
<meta property="article:published_time" content="2017-03-04T03:57:15.000Z">
<meta property="article:modified_time" content="2021-11-17T09:21:46.855Z">
<meta property="article:author" content="dodoliu">
<meta property="article:tag" content="Ruby">
<meta property="article:tag" content="Ruby On Rails">
<meta name="twitter:card" content="summary">

<link rel="canonical" href="http://dodoliu.github.io/rails-tip-custom-generator">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'zh-CN'
  };
</script>

  <title>自定义generator | dodoliu的折腾笔记</title>
  






  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="dodoliu的折腾笔记" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">dodoliu的折腾笔记</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
      <p class="site-subtitle" itemprop="description">生命不息，折腾不止！</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档</a>

  </li>
  </ul>
</nav>




</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="http://dodoliu.github.io/rails-tip-custom-generator">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="dodoliu">
      <meta itemprop="description" content="爱生活，爱折腾！">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="dodoliu的折腾笔记">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          自定义generator
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">发表于</span>

              <time title="创建时间：2017-03-04 11:57:15" itemprop="dateCreated datePublished" datetime="2017-03-04T11:57:15+08:00">2017-03-04</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="far fa-calendar-check"></i>
                </span>
                <span class="post-meta-item-text">更新于</span>
                <time title="修改时间：2021-11-17 17:21:46" itemprop="dateModified" datetime="2021-11-17T17:21:46+08:00">2021-11-17</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-folder"></i>
              </span>
              <span class="post-meta-item-text">分类于</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/Ruby-On-Rails/" itemprop="url" rel="index"><span itemprop="name">Ruby On Rails</span></a>
                </span>
            </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <p>在Rails项目中,scaffold提供了生成初始代码的强大功能.但任然不能满足日常开发需求.针对部分重复的代码手动ctrl+c,ctrl+v总显得太low.如果能自定义scaffold那就完美了.<br>庆幸的是Rails提供了这种功能.下面以我的开源项目opendoc为例,来自定义scaffold.<br>首先来生成generator.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate generator opendoc_scaffold</span><br></pre></td></tr></table></figure>
<p>上面的命令会生成下面这些文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create  lib/generators/opendoc_scaffold</span><br><span class="line">create  lib/generators/opendoc_scaffold/opendoc_scaffold_generator.rb</span><br><span class="line">create  lib/generators/opendoc_scaffold/USAGE</span><br><span class="line">create  lib/generators/opendoc_scaffold/templates</span><br><span class="line">invoke  test_unit</span><br><span class="line">create    <span class="built_in">test</span>/lib/generators/opendoc_scaffold_generator_test.rb</span><br></pre></td></tr></table></figure>
<p>单从名字上看,我们已经大体上知道这些文件是干啥用的了.<br>USAGE是定义一些说明.<br>templates文件夹下放一些模板.<br>opendoc_scaffold_generator.rb是启动文件.内容如下</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpendocScaffoldGenerator</span> &lt; Rails::Generators::<span class="title">NamedBase</span></span></span><br><span class="line">  source_root File.expand_path(<span class="string">&#x27;../templates&#x27;</span>, <span class="keyword">__FILE__</span>) <span class="comment">#指定模板根目录</span></span><br><span class="line">  <span class="comment">#创建一个启动方法,以下代码不是自动生成的</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">copy_opendoc_scaffold_file</span></span></span><br><span class="line">    <span class="comment">#controller</span></span><br><span class="line">    template <span class="string">&#x27;controller.rb&#x27;</span>, <span class="string">&quot;app/controllers/backend/<span class="subst">#&#123;table_name&#125;</span>_controller.rb&quot;</span></span><br><span class="line">    <span class="comment">#model</span></span><br><span class="line">    template <span class="string">&#x27;model.rb&#x27;</span>, <span class="string">&quot;app/models/<span class="subst">#&#123;singular_table_name&#125;</span>.rb&quot;</span></span><br><span class="line">    <span class="comment">#views</span></span><br><span class="line">    copy_file <span class="string">&#x27;erb/new.html.erb&#x27;</span>, <span class="string">&quot;app/views/backend/<span class="subst">#&#123;file_name&#125;</span>/new.html.erb&quot;</span></span><br><span class="line">    copy_file <span class="string">&#x27;erb/edit.html.erb&#x27;</span>, <span class="string">&quot;app/views/backend/<span class="subst">#&#123;file_name&#125;</span>/edit.html.erb&quot;</span></span><br><span class="line">    template <span class="string">&#x27;erb/index.html.erb&#x27;</span>, <span class="string">&quot;app/views/backend/<span class="subst">#&#123;file_name&#125;</span>/index.html.erb&quot;</span></span><br><span class="line">    template <span class="string">&#x27;erb/_form.html.erb&#x27;</span>, <span class="string">&quot;app/views/backend/<span class="subst">#&#123;file_name&#125;</span>/_form.html.erb&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上诉代码中用到的template方法的意思是复制模板到指定的地方.<br>比如自动生成model.下面这些代码是我自定义的model模板.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">require &#x27;uuidtools&#x27;</span><br><span class="line"></span><br><span class="line">class &lt;%= singular_table_name.capitalize %&gt; &lt; ApplicationRecord</span><br><span class="line">  enum status: [:archived, :active]</span><br><span class="line"></span><br><span class="line">  #validates</span><br><span class="line">  validates :TODO, presence: true, length: &#123; maximum: 50 &#125;</span><br><span class="line">  validates :TODO, numericality: true</span><br><span class="line"></span><br><span class="line">  #scope</span><br><span class="line">  default_scope &#123; where(&quot;status&gt;?&quot;, &lt;%=  singular_table_name.capitalize %&gt;.statuses[:archived]) &#125;</span><br><span class="line">  scope :name_like, -&gt;(name)&#123; where &quot;name like ? &quot;, &quot;%#&#123;sanitize_sql_like(name)&#125;%&quot; &#125;  #防sql注入</span><br><span class="line"></span><br><span class="line">  #假删除</span><br><span class="line">  def self.delete(&lt;%= singular_table_name %&gt;)</span><br><span class="line">    &lt;%= singular_table_name %&gt;.status = :archived</span><br><span class="line">    &lt;%= singular_table_name %&gt;.save</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  #设置属性值</span><br><span class="line">  def self.set_attribute(&lt;%= singular_table_name %&gt;_params)</span><br><span class="line">    &lt;%= singular_table_name %&gt; = &lt;%= singular_table_name.capitalize %&gt;.new(&lt;%= singular_table_name %&gt;_params)</span><br><span class="line">    &lt;%= singular_table_name %&gt;.sid = UUIDTools::UUID.timestamp_create</span><br><span class="line">    &lt;%= singular_table_name %&gt;.status = :active</span><br><span class="line">    &lt;%= singular_table_name %&gt;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>上面model模板中用到的 singular_table_name 以及 table_name 等这些方法都在 Rails::Generators::NamedBase <a target="_blank" rel="noopener" href="http://api.rubyonrails.org/classes/Rails/Generators/NamedBase.html">这个类下</a>.<br>定义完模板后就可以像使用scaffold一样使用我们的自定义generator了.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails generate opendoc_scaffold groups</span><br><span class="line">rails generate opendoc_scaffold members</span><br></pre></td></tr></table></figure>



    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/Ruby/" rel="tag"># Ruby</a>
              <a href="/tags/Ruby-On-Rails/" rel="tag"># Ruby On Rails</a>
          </div>

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/rails-tip-friendly-id" rel="prev" title="friendly_id的使用">
      <i class="fa fa-chevron-left"></i> friendly_id的使用
    </a></div>
      <div class="post-nav-item">
    <a href="/rails-tip-sidekiq-async-sendmail" rel="next" title="Rails下sidekiq无法异步发送邮件的问题">
      Rails下sidekiq无法异步发送邮件的问题 <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">dodoliu</p>
  <div class="site-description" itemprop="description">爱生活，爱折腾！</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">29</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
        <span class="site-state-item-count">10</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
        <span class="site-state-item-count">20</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>



      </div>

    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">dodoliu</span>
</div>
  <div class="powered-by">由 <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> & <a href="https://muse.theme-next.org/" class="theme-link" rel="noopener" target="_blank">NexT.Muse</a> 强力驱动
  </div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/muse.js"></script>


<script src="/js/next-boot.js"></script>




  















  

  

</body>
</html>
