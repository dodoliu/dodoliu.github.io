<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">


<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"dodoliu.github.io","root":"/","scheme":"Muse","version":"7.8.0","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"path":"search.xml"};
  </script>

  <meta name="description" content="编写测试的指导方针与应用代码相比,如果测试代码特别简短,倾向于先编写测试;如果对想实现的功能不是特别清楚,倾向于先编写应用代码,然后再编写测试,并改进实现方式;安全是头等大事,保险起见,要为安全相关的功能线编写测试;只要发现一个问题,就编写一个测试重现这种问题,避免回归,然后再编写应用代码修正问题;尽量不为以后可能修改的代码(例如HTML结构的细节)编写测试;重构之前要编写测试,集中测试容易出错的">
<meta property="og:type" content="article">
<meta property="og:title" content="《Ruby on Rails 教程》读书笔记">
<meta property="og:url" content="http://dodoliu.github.io/rails-read-railstutorial4th-notes">
<meta property="og:site_name" content="dodoliu的折腾笔记">
<meta property="og:description" content="编写测试的指导方针与应用代码相比,如果测试代码特别简短,倾向于先编写测试;如果对想实现的功能不是特别清楚,倾向于先编写应用代码,然后再编写测试,并改进实现方式;安全是头等大事,保险起见,要为安全相关的功能线编写测试;只要发现一个问题,就编写一个测试重现这种问题,避免回归,然后再编写应用代码修正问题;尽量不为以后可能修改的代码(例如HTML结构的细节)编写测试;重构之前要编写测试,集中测试容易出错的">
<meta property="og:locale" content="zh_CN">
<meta property="article:published_time" content="2016-08-29T14:07:13.000Z">
<meta property="article:modified_time" content="2021-11-17T09:22:09.488Z">
<meta property="article:author" content="dodoliu">
<meta property="article:tag" content="Ruby On Rails">
<meta property="article:tag" content="Ruby">
<meta name="twitter:card" content="summary">

<link rel="canonical" href="http://dodoliu.github.io/rails-read-railstutorial4th-notes">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'zh-CN'
  };
</script>

  <title>《Ruby on Rails 教程》读书笔记 | dodoliu的折腾笔记</title>
  






  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="dodoliu的折腾笔记" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">dodoliu的折腾笔记</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
      <p class="site-subtitle" itemprop="description">生命不息，折腾不止！</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档</a>

  </li>
  </ul>
</nav>




</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="http://dodoliu.github.io/rails-read-railstutorial4th-notes">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="dodoliu">
      <meta itemprop="description" content="爱生活，爱折腾！">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="dodoliu的折腾笔记">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          《Ruby on Rails 教程》读书笔记
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">发表于</span>

              <time title="创建时间：2016-08-29 22:07:13" itemprop="dateCreated datePublished" datetime="2016-08-29T22:07:13+08:00">2016-08-29</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="far fa-calendar-check"></i>
                </span>
                <span class="post-meta-item-text">更新于</span>
                <time title="修改时间：2021-11-17 17:22:09" itemprop="dateModified" datetime="2021-11-17T17:22:09+08:00">2021-11-17</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-folder"></i>
              </span>
              <span class="post-meta-item-text">分类于</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/Ruby-On-Rails/" itemprop="url" rel="index"><span itemprop="name">Ruby On Rails</span></a>
                </span>
            </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <h5 id="编写测试的指导方针"><a href="#编写测试的指导方针" class="headerlink" title="编写测试的指导方针"></a>编写测试的指导方针</h5><p>与应用代码相比,如果测试代码特别简短,倾向于先编写测试;<br>如果对想实现的功能不是特别清楚,倾向于先编写应用代码,然后再编写测试,并改进实现方式;<br>安全是头等大事,保险起见,要为安全相关的功能线编写测试;<br>只要发现一个问题,就编写一个测试重现这种问题,避免回归,然后再编写应用代码修正问题;<br>尽量不为以后可能修改的代码(例如HTML结构的细节)编写测试;<br>重构之前要编写测试,集中测试容易出错的代码.<br>在实际的开发中,根据上述方针,我们一般先编写控制器和模型测试,然后再编写集成测试(测试模型、试视图和控制器在一起时的表现)。如果应用代码很容易出错，或者经常变动（视图就是这样），我们就完全不测试。</p>
<h5 id="assert-select"><a href="#assert-select" class="headerlink" title="assert_select"></a>assert_select</h5><p>test中的辅助函数,用于检测html中是否有指定的html标签,这个方法有时也叫”选择符”<br>assert_select ‘title’,’Home I Ruby on Rails Tutorial Sample App’ #含义: 检测有没有&lt; title &gt;标签,以及其中的内容是不是 “Home I Ruby on Rails Tutorial Sample App”<br>一些用法:<br>| 代码        | 匹配HTML         |<br>| ————- |:————-:|<br>| assert_select ‘div’      | &lt; div&gt;foobar&lt; /div&gt; |<br>| assert_select ‘div’,’foobar’     | &lt; div&gt;foorbar&lt; /div&gt; |<br>| assert_select ‘div.nav’     | &lt; div class=’nav’&gt;foorbar&lt; /div&gt; |<br>| assert_select ‘div#profile’     | &lt; div id=’profile’&gt;foorbar&lt; /div&gt; |<br>| assert_select ‘div[name=yo]’     | &lt; div name=’yo’&gt;hey&lt; /div&gt; |<br>| assert_select “a[href=?]”,’/‘,count:1    | &lt; div href=’/‘&gt;foo&lt; /div&gt; |<br>| assert_select “a[href=?]”,’/‘,text: “foo”    | &lt; div href=’/‘&gt;foo&lt; /div&gt; |</p>
<p>选择这样一个input标签的assert_select写法为:<br>&lt; input id=”email” name=”email” type=”hidden” value=”<a href="mailto:&#97;&#x40;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#97;&#x40;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>“ / &gt;<br>assert_select “input[name=email][type=hidden][value=?]”, ‘<a href="mailto:&#x61;&#x40;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#x61;&#x40;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>‘</p>
<h5 id="provide-帮助方法"><a href="#provide-帮助方法" class="headerlink" title="provide 帮助方法"></a>provide 帮助方法</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% provide(<span class="symbol">:title</span>, <span class="string">&quot;Home&quot;</span>) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;%= <span class="keyword">yield</span>(<span class="symbol">:title</span>) %&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/head</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="使用git开发的步骤"><a href="#使用git开发的步骤" class="headerlink" title="使用git开发的步骤"></a>使用git开发的步骤</h5><p>有新的需求时,创建一个分支,再分支上进行开发,开发完成后合并到主分支.</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master #切换到master分支</span><br><span class="line">git merge static-pages #把static-pages分支merge到master分支</span><br></pre></td></tr></table></figure>
<h5 id="ps-命令"><a href="#ps-命令" class="headerlink" title="ps 命令"></a>ps 命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux  <span class="comment">#查看系统进程</span></span><br><span class="line">ps aux | grep spring <span class="comment">#查找spring</span></span><br></pre></td></tr></table></figure>
<h5 id="Guard的配置"><a href="#Guard的配置" class="headerlink" title="Guard的配置"></a>Guard的配置</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># Defines the matching rules for Guard.</span></span><br><span class="line">guard <span class="symbol">:minitest</span>, <span class="symbol">spring:</span> <span class="literal">true</span>, <span class="symbol">all_on_start:</span> <span class="literal">false</span> <span class="keyword">do</span></span><br><span class="line">    watch(<span class="regexp">%r&#123;^test/(.*)/?(.*)_test\.rb$&#125;</span>)</span><br><span class="line">    watch(<span class="string">&#x27;test/test_helper.rb&#x27;</span>) &#123; <span class="string">&#x27;test&#x27;</span> &#125;</span><br><span class="line">    watch(<span class="string">&#x27;config/routes.rb&#x27;</span>) &#123; integration_tests &#125;</span><br><span class="line">    watch(<span class="regexp">%r&#123;^app/models/(.*?)\.rb$&#125;</span>) <span class="keyword">do</span> <span class="params">|matches|</span></span><br><span class="line">        <span class="string">&quot;test/models/<span class="subst">#&#123;matches[<span class="number">1</span>]&#125;</span>_test.rb&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    watch(<span class="regexp">%r&#123;^app/controllers/(.*?)_controller\.rb$&#125;</span>) <span class="keyword">do</span> <span class="params">|matches|</span></span><br><span class="line">        resource_tests(matches[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    watch(<span class="regexp">%r&#123;^app/views/([^/]*?)/.*\.html\.erb$&#125;</span>) <span class="keyword">do</span> <span class="params">|matches|</span></span><br><span class="line">            [<span class="string">&quot;test/controllers/<span class="subst">#&#123;matches[<span class="number">1</span>]&#125;</span>_controller_test.rb&quot;</span>] +</span><br><span class="line">        integration_tests(matches[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    watch(<span class="regexp">%r&#123;^app/helpers/(.*?)_helper\.rb$&#125;</span>) <span class="keyword">do</span> <span class="params">|matches|</span></span><br><span class="line">        integration_tests(matches[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    watch(<span class="string">&#x27;app/views/layouts/application.html.erb&#x27;</span>) <span class="keyword">do</span></span><br><span class="line">            <span class="string">&#x27;test/integration/site_layout_test.rb&#x27;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    watch(<span class="string">&#x27;app/helpers/sessions_helper.rb&#x27;</span>) <span class="keyword">do</span></span><br><span class="line">        integration_tests &lt;&lt; <span class="string">&#x27;test/helpers/sessions_helper_test.rb&#x27;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    watch(<span class="string">&#x27;app/controllers/sessions_controller.rb&#x27;</span>) <span class="keyword">do</span> [<span class="string">&#x27;test/controllers/sessions_controller_test.rb&#x27;</span>,<span class="string">&#x27;test/integration/users_login_test.rb&#x27;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    watch(<span class="string">&#x27;app/controllers/account_activations_controller.rb&#x27;</span>) <span class="keyword">do</span> <span class="string">&#x27;test/integration/users_signup_test.rb&#x27;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    watch(<span class="regexp">%r&#123;app/views/users/*&#125;</span>) <span class="keyword">do</span></span><br><span class="line">            resource_tests(<span class="string">&#x27;users&#x27;</span>) +</span><br><span class="line">    [<span class="string">&#x27;test/integration/microposts_interface_test.rb&#x27;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Returns the integration tests corresponding to the given resource.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">integration_tests</span><span class="params">(resource = <span class="symbol">:all</span>)</span></span> <span class="keyword">if</span> resource == <span class="symbol">:all</span></span><br><span class="line">    Dir[<span class="string">&quot;test/integration/*&quot;</span>] <span class="keyword">else</span></span><br><span class="line">    Dir[<span class="string">&quot;test/integration/<span class="subst">#&#123;resource&#125;</span>_*.rb&quot;</span>] <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Returns the controller tests corresponding to the given resource.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">controller_test</span><span class="params">(resource)</span></span> <span class="string">&quot;test/controllers/<span class="subst">#&#123;resource&#125;</span>_controller_test.rb&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">    <span class="comment"># Returns all tests for the given resource.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resource_tests</span><span class="params">(resource)</span></span></span><br><span class="line">    integration_tests(resource) &lt;&lt; controller_test(resource)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#下面这行会让 Guard 使用 Rails 提供的 Spring 服务器减少加载时间,而且启动时不运行整个测试组件。</span></span><br><span class="line">guard <span class="symbol">:minitest</span>, <span class="symbol">spring:</span> <span class="literal">true</span>, <span class="symbol">all_on_start:</span> <span class="literal">false</span> <span class="keyword">do</span></span><br><span class="line"><span class="comment">#使用 Guard 时,为了避免 Spring 和 Git 发生冲突,应该把 spring/ 文件夹加到 .gitignore 文件中,让 Git 忽 略这个文件夹。</span></span><br></pre></td></tr></table></figure>
<h5 id="bang方法约定"><a href="#bang方法约定" class="headerlink" title="bang方法约定"></a>bang方法约定</h5><p>方法名后加一个感叹号的方法称为”炸弹”(bang)方法.bang方法的含义是 方法处理的结果会改变对象的值.比如:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2.3.1 :001 &gt; a = %w(2 3 5)</span><br><span class="line"> =&gt; [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;5&quot;</span>]</span><br><span class="line">2.3.1 :002 &gt; a.sort</span><br><span class="line"> =&gt; [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;5&quot;</span>]</span><br><span class="line">2.3.1 :003 &gt; a = %w(5 9 2)</span><br><span class="line"> =&gt; [<span class="string">&quot;5&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line">2.3.1 :004 &gt; a.sort</span><br><span class="line"> =&gt; [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;9&quot;</span>]</span><br><span class="line">2.3.1 :005 &gt; a</span><br><span class="line"> =&gt; [<span class="string">&quot;5&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line">2.3.1 :006 &gt; a.sort!</span><br><span class="line"> =&gt; [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;9&quot;</span>]</span><br><span class="line">2.3.1 :007 &gt; a</span><br><span class="line"> =&gt; [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;9&quot;</span>]</span><br></pre></td></tr></table></figure>
<h5 id="数组的-push-lt-lt"><a href="#数组的-push-lt-lt" class="headerlink" title="数组的 push | &lt;&lt;"></a>数组的 push | &lt;&lt;</h5><p>为数组添加元素可以使用 push方法,也可以使用 &lt;&lt; 运算符.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.3.1 :008 &gt; a &lt;&lt; <span class="string">&#x27;bbb&#x27;</span> &lt;&lt; <span class="string">&#x27;dddd&#x27;</span></span><br><span class="line"> =&gt; [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;dddd&quot;</span>]</span><br></pre></td></tr></table></figure>
<h5 id="map块变量调用方法简写形式-amp"><a href="#map块变量调用方法简写形式-amp" class="headerlink" title="map块变量调用方法简写形式 &amp;"></a>map块变量调用方法简写形式 &amp;</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.1 :011 &gt;</span> a.map &#123;<span class="params">|item|</span> item.upcase &#125;</span><br><span class="line"> =&gt; [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;BBB&quot;</span>, <span class="string">&quot;DDDD&quot;</span>]</span><br><span class="line"><span class="meta">2.3.1 :012 &gt;</span> a.map(&amp;<span class="symbol">:downcase</span>)</span><br><span class="line"> =&gt; [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;dddd&quot;</span>]</span><br></pre></td></tr></table></figure>
<h5 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#几种写法 及 多层嵌套后的hash取值方式</span></span><br><span class="line"><span class="meta">2.3.1 :001 &gt;</span> a = &#123; <span class="string">&quot;a1&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;a2&quot;</span> =&gt; <span class="number">2</span>  &#125;</span><br><span class="line"> =&gt; &#123;<span class="string">&quot;a1&quot;</span>=&gt;<span class="number">1</span>, <span class="string">&quot;a2&quot;</span>=&gt;<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">2.3.1 :002 &gt;</span> b = &#123; <span class="symbol">:b1</span> =&gt; <span class="number">1</span>, <span class="symbol">:b2</span> =&gt; <span class="number">2</span> &#125;</span><br><span class="line"> =&gt; &#123;<span class="symbol">:b1=&gt;</span><span class="number">1</span>, <span class="symbol">:b2=&gt;</span><span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">2.3.1 :003 &gt;</span> c = &#123; <span class="symbol">c1:</span> <span class="number">1</span>, <span class="symbol">c2:</span> <span class="number">2</span> &#125;</span><br><span class="line"> =&gt; &#123;<span class="symbol">:c1=&gt;</span><span class="number">1</span>, <span class="symbol">:c2=&gt;</span><span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">#多层嵌套后的hash取值</span></span><br><span class="line"> <span class="number">2.3</span>.<span class="number">1</span> <span class="symbol">:</span><span class="number">004</span> &gt; d = &#123; <span class="symbol">d1:</span> &#123; <span class="symbol">dd1:</span> &#123; <span class="symbol">ddd1:</span> <span class="number">6</span>, <span class="symbol">ddd2:</span> <span class="number">7</span>&#125;, <span class="symbol">dd2:</span> <span class="number">4</span> &#125;, <span class="symbol">d2:</span> <span class="number">3</span> &#125;</span><br><span class="line"> =&gt; &#123;<span class="symbol">:d1=&gt;</span>&#123;<span class="symbol">:dd1=&gt;</span>&#123;<span class="symbol">:ddd1=&gt;</span><span class="number">6</span>, <span class="symbol">:ddd2=&gt;</span><span class="number">7</span>&#125;, <span class="symbol">:dd2=&gt;</span><span class="number">4</span>&#125;, <span class="symbol">:d2=&gt;</span><span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">2.3.1 :011 &gt;</span> d[<span class="symbol">:d1</span>]</span><br><span class="line"> =&gt; &#123;<span class="symbol">:dd1=&gt;</span>&#123;<span class="symbol">:ddd1=&gt;</span><span class="number">6</span>, <span class="symbol">:ddd2=&gt;</span><span class="number">7</span>&#125;, <span class="symbol">:dd2=&gt;</span><span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">2.3.1 :012 &gt;</span> d[<span class="symbol">:d1</span>][<span class="symbol">:dd1</span>]</span><br><span class="line"> =&gt; &#123;<span class="symbol">:ddd1=&gt;</span><span class="number">6</span>, <span class="symbol">:ddd2=&gt;</span><span class="number">7</span>&#125;</span><br><span class="line"><span class="meta">2.3.1 :013 &gt;</span> d[<span class="symbol">:d1</span>][<span class="symbol">:dd1</span>][<span class="symbol">:ddd2</span>]</span><br><span class="line"> =&gt; <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#hash的merge方法</span></span><br><span class="line"><span class="meta">2.3.1 :018 &gt;</span> a</span><br><span class="line"> =&gt; &#123;<span class="string">&quot;a1&quot;</span>=&gt;<span class="number">1</span>, <span class="string">&quot;a2&quot;</span>=&gt;<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">2.3.1 :019 &gt;</span> b</span><br><span class="line"> =&gt; &#123;<span class="symbol">:b1=&gt;</span><span class="number">1</span>, <span class="symbol">:b2=&gt;</span><span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">2.3.1 :020 &gt;</span> a.merge b</span><br><span class="line"> =&gt; &#123;<span class="string">&quot;a1&quot;</span>=&gt;<span class="number">1</span>, <span class="string">&quot;a2&quot;</span>=&gt;<span class="number">2</span>, <span class="symbol">:b1=&gt;</span><span class="number">1</span>, <span class="symbol">:b2=&gt;</span><span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#函数调用时,如果哈希是最后一个参数,可以省略花括号.比如:</span></span><br><span class="line">stylesheet_link_tag <span class="string">&#x27;application&#x27;</span>, &#123; <span class="symbol">media:</span> <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;data-turbolinks-track&#x27;</span>: <span class="string">&#x27;reload&#x27;</span>&#125;</span><br><span class="line">stylesheet_link_tag <span class="string">&#x27;application&#x27;</span>, <span class="symbol">media:</span> <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;data-turbolinks-track&#x27;</span>: <span class="string">&#x27;reload&#x27;</span></span><br></pre></td></tr></table></figure>
<h5 id="字符串、数组、hash、Range的声明"><a href="#字符串、数组、hash、Range的声明" class="headerlink" title="字符串、数组、hash、Range的声明"></a>字符串、数组、hash、Range的声明</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">a = String.new</span><br><span class="line">a = String.new(<span class="string">&#x27;dd&#x27;</span>)</span><br><span class="line">b = []</span><br><span class="line">b = Array.new</span><br><span class="line">c = &#123;&#125;</span><br><span class="line">c = Hash.new</span><br><span class="line">d = Range.new(<span class="number">0</span>,<span class="number">2</span>)  <span class="comment">#声明一个范围</span></span><br></pre></td></tr></table></figure>
<h5 id="预处理引擎的执行顺序"><a href="#预处理引擎的执行顺序" class="headerlink" title="预处理引擎的执行顺序"></a>预处理引擎的执行顺序</h5><p>从右向左执行<br>foobar.js.erb.coffee #先通过coffee处理,再通过ruby处理</p>
<h5 id="路由的-path-和-url"><a href="#路由的-path-和-url" class="headerlink" title="路由的 _path 和 _url"></a>路由的 _path 和 _url</h5><p>root_path -&gt; ‘/‘<br>root_url -&gt; ‘<a target="_blank" rel="noopener" href="http://www.example.com/&#39;">http://www.example.com/&#39;</a><br>约定 只有重定向使用_url形式,其余都使用_path形式.(因为HTTP标准严格要求重定向的URL必须完整.不过在大多数浏览器中,两种形式都可以正常使用)</p>
<h5 id="测试方法-assert-template"><a href="#测试方法-assert-template" class="headerlink" title="测试方法 assert_template"></a>测试方法 assert_template</h5><p>检查路由是否使用正确的视图渲染<br>get root_path<br>assert_template ‘static_pages/home’<br>#请求root路由,看root路由是否使用了static_pages下的home视图渲染.</p>
<h5 id="沙盒模式"><a href="#沙盒模式" class="headerlink" title="沙盒模式"></a>沙盒模式</h5><p>rails console –sandbox<br>在沙盒模式下做的所有修改都不会影响实际数据.<br>在控制台下可以使用 reload方法重新加载环境</p>
<h5 id="ActiveRecord的一些方法"><a href="#ActiveRecord的一些方法" class="headerlink" title="ActiveRecord的一些方法"></a>ActiveRecord的一些方法</h5><p>user.new #在内存中创建对象<br>user.save #保存到数据库,save方法会返回true和false<br>以上两步和<br>user.create #create方法会返回对象的实例<br>等效.<br>user.valid? #只检测对象是否有效<br>user.destroy #create方法的逆操作,也会返回对象的实例.(销毁的对象还在内存中)<br>user.update_attributes(name: ‘The Dude’, email: ‘<a href="mailto:&#x64;&#x75;&#100;&#101;&#64;&#x61;&#x62;&#105;&#x64;&#101;&#x73;&#x2e;&#111;&#x72;&#103;">&#x64;&#x75;&#100;&#101;&#64;&#x61;&#x62;&#105;&#x64;&#101;&#x73;&#x2e;&#111;&#x72;&#103;</a>‘) #更新name和email属性,返回ture和false.该方法无法跳过验证<br>user.update_attribute(:name, ‘El Duderino’) #更新单个属性,该方法可以跳过验证<br>User.find(params[:id]).destroy #可以再查询到的结果上直接调用destroy方法删除对象,物理删除…</p>
<h5 id="Model的验证"><a href="#Model的验证" class="headerlink" title="Model的验证"></a>Model的验证</h5><p>validate :email, format: { with: /<regular expression>/ } #validate可以有format参数,提供正则验证</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VALID_EMAIL_REGEX = <span class="regexp">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span></span><br><span class="line">validates <span class="symbol">:email</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123;<span class="symbol">maximum:</span> <span class="number">255</span> &#125;, <span class="symbol">format:</span> &#123;<span class="symbol">with:</span> VALID_EMAIL_REGEX &#125;</span><br></pre></td></tr></table></figure>
<h5 id="正则表达式-i-g-m-gi-ig-区别"><a href="#正则表达式-i-g-m-gi-ig-区别" class="headerlink" title="正则表达式 /i,/g,/m,/gi,/ig 区别"></a>正则表达式 /i,/g,/m,/gi,/ig 区别</h5><p>/i (忽略大小写)<br>/g (全文查找出现的所有匹配字符)<br>/m (多行查找)<br>/gi(全文查找、忽略大小写)<br>/ig(全文查找、忽略大小写)</p>
<h5 id="产生7位随机的字符"><a href="#产生7位随机的字符" class="headerlink" title="产生7位随机的字符"></a>产生7位随机的字符</h5><p>(‘a’..’z’).to_a.shuffle[0..7].join</p>
<h5 id="dup方法复制一个对象"><a href="#dup方法复制一个对象" class="headerlink" title="dup方法复制一个对象"></a>dup方法复制一个对象</h5><p>duplicate_user = @user.dup</p>
<h5 id="model的-before-save-方法"><a href="#model的-before-save-方法" class="headerlink" title="model的 before_save 方法"></a>model的 before_save 方法</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    before_save &#123; <span class="keyword">self</span>.email = email.downcase &#125; <span class="comment">#在执行save方法前,先把email转换为小写</span></span><br><span class="line">    validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123; <span class="symbol">maximum:</span> <span class="number">50</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h5 id="has-secure-password-方法"><a href="#has-secure-password-方法" class="headerlink" title="has_secure_password 方法"></a>has_secure_password 方法</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">calss User &lt; ApplicationRecord</span><br><span class="line">    has_secure_password</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在模型中调用了该方法后,会自动添加以下功能:<br>在数据库中的password_digest列存储安全的密码哈希值;<br>获得一对虚拟属性,password和password_confirmation,而且创建用户对象时会执行存在性验证和匹配验证;<br>获得authenticate方法,如果密码正确,返回对应的用户对象,否则返回false;<br>这个方法需要表有 password_digest字段.</p>
<h5 id="可以根据环境的不同展示debug信息"><a href="#可以根据环境的不同展示debug信息" class="headerlink" title="可以根据环境的不同展示debug信息"></a>可以根据环境的不同展示debug信息</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;% debug(params) if Rails.env.development?  % &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="在指定的环境下执行命令"><a href="#在指定的环境下执行命令" class="headerlink" title="在指定的环境下执行命令"></a>在指定的环境下执行命令</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rails console test <span class="comment">#在test环境下启用rails console</span></span><br><span class="line">rails server --enviroment production <span class="comment">#在production环境下运行服务</span></span><br><span class="line">rails <span class="symbol">db:</span>migrate RAILS_ENV=production <span class="comment">#迁移production环境数据库</span></span><br><span class="line"><span class="comment">#控制台,服务器,迁移命令 这几个命令中都可以使用RAILS_ENV=&lt;env&gt;,比如: RAILS_ENV=production rails server</span></span><br></pre></td></tr></table></figure>
<h5 id="健壮参数"><a href="#健壮参数" class="headerlink" title="健壮参数"></a>健壮参数</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">params.<span class="keyword">require</span>(<span class="symbol">:user</span>).permit(<span class="symbol">:name</span>,<span class="symbol">:email</span>,<span class="symbol">:password</span>,<span class="symbol">:password_confirmation</span>)</span><br></pre></td></tr></table></figure>
<h5 id="model的erros对象"><a href="#model的erros对象" class="headerlink" title="model的erros对象"></a>model的erros对象</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.errors.full_messages <span class="comment">#查看所有错误信息,是一个数组</span></span><br><span class="line">user.errors.empty? <span class="comment">#判断是否存在错误信息</span></span><br><span class="line">user.errors.any?  <span class="comment">#判断是否存在错误信息,可以empty?含义相反</span></span><br></pre></td></tr></table></figure>
<h5 id="helper的pluralize方法"><a href="#helper的pluralize方法" class="headerlink" title="helper的pluralize方法"></a>helper的pluralize方法</h5><p>该方法返回正确的单复数形式</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helper.pluralize(<span class="number">1</span>,<span class="string">&quot;error&quot;</span>) <span class="comment"># 1 error</span></span><br><span class="line">helper.pluralize(<span class="number">2</span>,<span class="string">&quot;error&quot;</span>) <span class="comment"># 2 errors</span></span><br></pre></td></tr></table></figure>
<h5 id="redirect-to"><a href="#redirect-to" class="headerlink" title="redirect_to"></a>redirect_to</h5><p>redirect_to @user<br>redirect_to user_url(@user)<br>以上两种形式的含义相同</p>
<h5 id="或等运算符"><a href="#或等运算符" class="headerlink" title="||= 或等运算符"></a>||= 或等运算符</h5><p>a ||= b<br>相当于 a = a || b<br>当a为真时返回a的值,当a为假时返回b的值</p>
<h5 id="if-a-b"><a href="#if-a-b" class="headerlink" title="if(a=b)"></a>if(a=b)</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">if</span> a = b</span><br><span class="line">  puts a</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="number">3</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上面的代码意思是当b存在时,把b赋给a,然后打印a,当b不存在时,打印3</p>
<h5 id="activerecord的new-record-方法"><a href="#activerecord的new-record-方法" class="headerlink" title="activerecord的new_record?方法"></a>activerecord的new_record?方法</h5><p>User.new.new_record? # true<br>User.first.new_record? #false<br>用于检测对象是新创建的还是存在于数据库中.</p>
<h5 id="model的validates允许为空的验证"><a href="#model的validates允许为空的验证" class="headerlink" title="model的validates允许为空的验证"></a>model的validates允许为空的验证</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">validates <span class="symbol">:password</span>, <span class="symbol">presence:</span> <span class="literal">true</span>, <span class="symbol">length:</span> &#123;<span class="symbol">minimum:</span> <span class="number">6</span>&#125;, <span class="symbol">allow_nil:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="权限验证使用过滤器实现"><a href="#权限验证使用过滤器实现" class="headerlink" title="权限验证使用过滤器实现"></a>权限验证使用过滤器实现</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> &lt; ApplicationController</span></span><br><span class="line">    before_action <span class="symbol">:logged_in_user</span>, <span class="symbol">only:</span> [<span class="symbol">:edit</span>, <span class="symbol">:update</span>]</span><br><span class="line">    before_action <span class="symbol">:correct_user</span>, <span class="symbol">only:</span> [<span class="symbol">:edit</span>, <span class="symbol">:update</span>]</span><br><span class="line"></span><br><span class="line">    private</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">loggent_in_user</span></span></span><br><span class="line">            <span class="keyword">unless</span> logged_in?</span><br><span class="line">                flash[<span class="symbol">:danger</span>] = <span class="string">&#x27;.....&#x27;</span></span><br><span class="line">                redirect_to login_url</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">correct_user</span></span></span><br><span class="line">            <span class="variable">@user</span> = User.find(params[<span class="symbol">:id</span>])</span><br><span class="line">            redirect_to(root_url) <span class="keyword">unless</span> <span class="variable">@user</span> == current_user</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>删除用户的链接只有管理员才能看到</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> current_user.admin? &amp;&amp; !current_user?(user) % &gt;</span><br><span class="line">&lt;% link_to <span class="string">&quot;delete&quot;</span>, user, <span class="symbol">method:</span> <span class="symbol">:delete</span>, <span class="symbol">data:</span> &#123;<span class="symbol">confirm:</span> <span class="string">&#x27;You sure?&#x27;</span>&#125; % &gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> % &gt;</span><br></pre></td></tr></table></figure>
<p>为了限制只有管理员才能删除用户信息,需要这样做</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> &lt; ApplicationController</span></span><br><span class="line">    before_action <span class="symbol">:admin_user</span>, <span class="symbol">only:</span> <span class="symbol">:destroy</span></span><br><span class="line"></span><br><span class="line">    private</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">admin_user</span></span></span><br><span class="line">            redirect_to(root_url) <span class="keyword">unless</span> current_user.admin?</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在数据保存,创建之前都有相应的过滤器<br>比如: before_create, before_save 等</p>
<h5 id="send方法"><a href="#send方法" class="headerlink" title="send方法"></a>send方法</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.1 :004 &gt;</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">2.3.1 :005 &gt;</span> a.length</span><br><span class="line"> =&gt; <span class="number">3</span></span><br><span class="line"><span class="meta">2.3.1 :006 &gt;</span> a.send(<span class="symbol">:length</span>)</span><br><span class="line"> =&gt; <span class="number">3</span></span><br><span class="line"><span class="meta">2.3.1 :007 &gt;</span> a.send(<span class="string">&quot;length&quot;</span>)</span><br><span class="line"> =&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>可见send方法可以在对象上调用以字符串或符号方式传入的参数的方法</p>
<h5 id="flash"><a href="#flash" class="headerlink" title="flash"></a>flash</h5><p>falsh[:info] = “111” #用在redirect_to中,数据存在session中<br>falsh.now[:danger] = “111” #用在render中,数据存在request中</p>
<h5 id="has-many-和-belongs-to"><a href="#has-many-和-belongs-to" class="headerlink" title="has_many 和 belongs_to"></a>has_many 和 belongs_to</h5><p>当micropost模型和 user模型进行 belongs_to/has_many关联后会获得这些方法:<br>micropost.user #返回与微博关联的用户对象<br>user.microposts #返回用户发布的所有微博<br>user.microposts.create(arg) #创建一篇user发布的微博<br>user.microposts.create!(arg) #创建一篇user发布的微博(失败时抛出异常)<br>user.microposts.build(arg) #返回一个user发布的新微博对象<br>user.microposts.find_by(id:1) #查找user发布的一篇微博,而且微博的id为1</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Micropost</span> &lt; ApplicationRecord</span></span><br><span class="line">    belongs_to <span class="symbol">:user</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    has_many <span class="symbol">:microposts</span>, <span class="symbol">dependent:</span> <span class="symbol">:destroy</span>  <span class="comment">#dependent: :destroy 的作用是再用户被删除的时候,把这个用户发布的微博也删除.</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h5 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Micropost</span> &lt; ApplicationRecord</span></span><br><span class="line">    belongs_to <span class="symbol">:user</span></span><br><span class="line">    default_scope -&gt; &#123; order(<span class="symbol">create_ar:</span> <span class="symbol">:desc</span>) &#125; <span class="comment">#默认的scope</span></span><br><span class="line">    scope <span class="symbol">:tmp</span>, -&gt; &#123;  &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h5 id="Proc-procedure-匿名函数"><a href="#Proc-procedure-匿名函数" class="headerlink" title="Proc(procedure) 匿名函数"></a>Proc(procedure) 匿名函数</h5><p>-&gt; 接受一个代码块,返回一个Proc,然后再这个Proc上调用call方法执行其中代码.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">2.3.1 :002 &gt;</span> a = -&gt; &#123; puts <span class="string">&#x27;b&#x27;</span> &#125;</span><br><span class="line"> =&gt; #&lt;Proc:0x007f9f338bfc98@(irb):2 (lambda)&gt;</span><br><span class="line"><span class="meta">2.3.1 :003 &gt;</span> a.call</span><br><span class="line">b</span><br><span class="line"> =&gt; nil</span><br><span class="line"><span class="meta">2.3.1 :004 &gt;</span> -&gt; &#123; puts <span class="string">&#x27;c&#x27;</span> &#125;.call</span><br><span class="line">c</span><br><span class="line"> =&gt; nil</span><br></pre></td></tr></table></figure>
<h4 id="render传递参数"><a href="#render传递参数" class="headerlink" title="render传递参数"></a>render传递参数</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= for_for(<span class="variable">@micropost</span>) <span class="keyword">do</span> <span class="params">|f|</span>  % &gt;</span><br><span class="line">&lt;%= render <span class="string">&#x27;shared/error_mesages&#x27;</span>, <span class="symbol">object:</span> f.object % &gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> % &gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#app/views/shared/_error_messages.html</span></span><br><span class="line">&lt;% <span class="keyword">if</span> object.errors.any? % &gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;error&quot;</span> &gt;<span class="number">1</span> &lt;\/ div &gt;</span><br><span class="line">&lt; % <span class="keyword">end</span> % &gt;</span><br></pre></td></tr></table></figure>









    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/Ruby-On-Rails/" rel="tag"># Ruby On Rails</a>
              <a href="/tags/Ruby/" rel="tag"># Ruby</a>
          </div>

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/hexo-error-module-did-not-self-register" rel="prev" title="Hexo Error:Module did not self-register">
      <i class="fa fa-chevron-left"></i> Hexo Error:Module did not self-register
    </a></div>
      <div class="post-nav-item">
    <a href="/road-to-2017" rel="next" title="致2017">
      致2017 <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-5"><a class="nav-link" href="#%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95%E7%9A%84%E6%8C%87%E5%AF%BC%E6%96%B9%E9%92%88"><span class="nav-number">1.</span> <span class="nav-text">编写测试的指导方针</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#assert-select"><span class="nav-number">2.</span> <span class="nav-text">assert_select</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#provide-%E5%B8%AE%E5%8A%A9%E6%96%B9%E6%B3%95"><span class="nav-number">3.</span> <span class="nav-text">provide 帮助方法</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E4%BD%BF%E7%94%A8git%E5%BC%80%E5%8F%91%E7%9A%84%E6%AD%A5%E9%AA%A4"><span class="nav-number">4.</span> <span class="nav-text">使用git开发的步骤</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#ps-%E5%91%BD%E4%BB%A4"><span class="nav-number">5.</span> <span class="nav-text">ps 命令</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#Guard%E7%9A%84%E9%85%8D%E7%BD%AE"><span class="nav-number">6.</span> <span class="nav-text">Guard的配置</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#bang%E6%96%B9%E6%B3%95%E7%BA%A6%E5%AE%9A"><span class="nav-number">7.</span> <span class="nav-text">bang方法约定</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E6%95%B0%E7%BB%84%E7%9A%84-push-lt-lt"><span class="nav-number">8.</span> <span class="nav-text">数组的 push | &lt;&lt;</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#map%E5%9D%97%E5%8F%98%E9%87%8F%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E5%86%99%E5%BD%A2%E5%BC%8F-amp"><span class="nav-number">9.</span> <span class="nav-text">map块变量调用方法简写形式 &amp;</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#hash"><span class="nav-number">10.</span> <span class="nav-text">hash</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81hash%E3%80%81Range%E7%9A%84%E5%A3%B0%E6%98%8E"><span class="nav-number">11.</span> <span class="nav-text">字符串、数组、hash、Range的声明</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E9%A2%84%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F"><span class="nav-number">12.</span> <span class="nav-text">预处理引擎的执行顺序</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E8%B7%AF%E7%94%B1%E7%9A%84-path-%E5%92%8C-url"><span class="nav-number">13.</span> <span class="nav-text">路由的 _path 和 _url</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95-assert-template"><span class="nav-number">14.</span> <span class="nav-text">测试方法 assert_template</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E6%B2%99%E7%9B%92%E6%A8%A1%E5%BC%8F"><span class="nav-number">15.</span> <span class="nav-text">沙盒模式</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#ActiveRecord%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95"><span class="nav-number">16.</span> <span class="nav-text">ActiveRecord的一些方法</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#Model%E7%9A%84%E9%AA%8C%E8%AF%81"><span class="nav-number">17.</span> <span class="nav-text">Model的验证</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-i-g-m-gi-ig-%E5%8C%BA%E5%88%AB"><span class="nav-number">18.</span> <span class="nav-text">正则表达式 &#x2F;i,&#x2F;g,&#x2F;m,&#x2F;gi,&#x2F;ig 区别</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E4%BA%A7%E7%94%9F7%E4%BD%8D%E9%9A%8F%E6%9C%BA%E7%9A%84%E5%AD%97%E7%AC%A6"><span class="nav-number">19.</span> <span class="nav-text">产生7位随机的字符</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#dup%E6%96%B9%E6%B3%95%E5%A4%8D%E5%88%B6%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1"><span class="nav-number">20.</span> <span class="nav-text">dup方法复制一个对象</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#model%E7%9A%84-before-save-%E6%96%B9%E6%B3%95"><span class="nav-number">21.</span> <span class="nav-text">model的 before_save 方法</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#has-secure-password-%E6%96%B9%E6%B3%95"><span class="nav-number">22.</span> <span class="nav-text">has_secure_password 方法</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%8D%E5%90%8C%E5%B1%95%E7%A4%BAdebug%E4%BF%A1%E6%81%AF"><span class="nav-number">23.</span> <span class="nav-text">可以根据环境的不同展示debug信息</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E5%9C%A8%E6%8C%87%E5%AE%9A%E7%9A%84%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4"><span class="nav-number">24.</span> <span class="nav-text">在指定的环境下执行命令</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E5%81%A5%E5%A3%AE%E5%8F%82%E6%95%B0"><span class="nav-number">25.</span> <span class="nav-text">健壮参数</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#model%E7%9A%84erros%E5%AF%B9%E8%B1%A1"><span class="nav-number">26.</span> <span class="nav-text">model的erros对象</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#helper%E7%9A%84pluralize%E6%96%B9%E6%B3%95"><span class="nav-number">27.</span> <span class="nav-text">helper的pluralize方法</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#redirect-to"><span class="nav-number">28.</span> <span class="nav-text">redirect_to</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E6%88%96%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6"><span class="nav-number">29.</span> <span class="nav-text">||&#x3D; 或等运算符</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#if-a-b"><span class="nav-number">30.</span> <span class="nav-text">if(a&#x3D;b)</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#activerecord%E7%9A%84new-record-%E6%96%B9%E6%B3%95"><span class="nav-number">31.</span> <span class="nav-text">activerecord的new_record?方法</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#model%E7%9A%84validates%E5%85%81%E8%AE%B8%E4%B8%BA%E7%A9%BA%E7%9A%84%E9%AA%8C%E8%AF%81"><span class="nav-number">32.</span> <span class="nav-text">model的validates允许为空的验证</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AE%9E%E7%8E%B0"><span class="nav-number">33.</span> <span class="nav-text">权限验证使用过滤器实现</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#send%E6%96%B9%E6%B3%95"><span class="nav-number">34.</span> <span class="nav-text">send方法</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#flash"><span class="nav-number">35.</span> <span class="nav-text">flash</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#has-many-%E5%92%8C-belongs-to"><span class="nav-number">36.</span> <span class="nav-text">has_many 和 belongs_to</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#scope"><span class="nav-number">37.</span> <span class="nav-text">scope</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#Proc-procedure-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0"><span class="nav-number">38.</span> <span class="nav-text">Proc(procedure) 匿名函数</span></a></li></ol></li><li class="nav-item nav-level-4"><a class="nav-link" href="#render%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0"><span class="nav-number"></span> <span class="nav-text">render传递参数</span></a></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">dodoliu</p>
  <div class="site-description" itemprop="description">爱生活，爱折腾！</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">28</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
        <span class="site-state-item-count">10</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
        <span class="site-state-item-count">20</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>



      </div>

    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">dodoliu</span>
</div>
  <div class="powered-by">由 <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> & <a href="https://muse.theme-next.org/" class="theme-link" rel="noopener" target="_blank">NexT.Muse</a> 强力驱动
  </div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/muse.js"></script>


<script src="/js/next-boot.js"></script>




  















  

  

</body>
</html>
